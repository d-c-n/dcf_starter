/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */,
/* 1 */,
/* 2 */,
/* 3 */
/*!**********************************************************!*\
  !*** ./theme/example/js/loaders/theme_body_js_loader.js ***!
  \**********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar dcf_core_body = __webpack_require__(/*! ../../../../core/js/core-body.js */ 4);\n\n// example: const ______ = require(relative filepath from this file)\n// const example_js = require('../src/example.js');//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy90aGVtZS9leGFtcGxlL2pzL2xvYWRlcnMvdGhlbWVfYm9keV9qc19sb2FkZXIuanM/Yjg2ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBkY2ZfY29yZV9ib2R5ID0gcmVxdWlyZSgnLi4vLi4vLi4vLi4vY29yZS9qcy9jb3JlLWJvZHkuanMnKTtcblxuLy8gZXhhbXBsZTogY29uc3QgX19fX19fID0gcmVxdWlyZShyZWxhdGl2ZSBmaWxlcGF0aCBmcm9tIHRoaXMgZmlsZSlcbi8vIGNvbnN0IGV4YW1wbGVfanMgPSByZXF1aXJlKCcuLi9zcmMvZXhhbXBsZS5qcycpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHRoZW1lL2V4YW1wbGUvanMvbG9hZGVycy90aGVtZV9ib2R5X2pzX2xvYWRlci5qcyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/*!******************************!*\
  !*** ./core/js/core-body.js ***!
  \******************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/******/(function (modules) {\n  // webpackBootstrap\n  /******/ // The module cache\n  /******/var installedModules = {};\n  /******/\n  /******/ // The require function\n  /******/function __webpack_require__(moduleId) {\n    /******/\n    /******/ // Check if module is in cache\n    /******/if (installedModules[moduleId]) {\n      /******/return installedModules[moduleId].exports;\n      /******/\n    }\n    /******/ // Create a new module (and put it into the cache)\n    /******/var module = installedModules[moduleId] = {\n      /******/i: moduleId,\n      /******/l: false,\n      /******/exports: {}\n      /******/ };\n    /******/\n    /******/ // Execute the module function\n    /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    /******/ // Flag the module as loaded\n    /******/module.l = true;\n    /******/\n    /******/ // Return the exports of the module\n    /******/return module.exports;\n    /******/\n  }\n  /******/\n  /******/\n  /******/ // expose the modules object (__webpack_modules__)\n  /******/__webpack_require__.m = modules;\n  /******/\n  /******/ // expose the module cache\n  /******/__webpack_require__.c = installedModules;\n  /******/\n  /******/ // define getter function for harmony exports\n  /******/__webpack_require__.d = function (exports, name, getter) {\n    /******/if (!__webpack_require__.o(exports, name)) {\n      /******/Object.defineProperty(exports, name, {\n        /******/configurable: false,\n        /******/enumerable: true,\n        /******/get: getter\n        /******/ });\n      /******/\n    }\n    /******/\n  };\n  /******/\n  /******/ // getDefaultExport function for compatibility with non-harmony modules\n  /******/__webpack_require__.n = function (module) {\n    /******/var getter = module && module.__esModule ?\n    /******/function getDefault() {\n      return module['default'];\n    } :\n    /******/function getModuleExports() {\n      return module;\n    };\n    /******/__webpack_require__.d(getter, 'a', getter);\n    /******/return getter;\n    /******/\n  };\n  /******/\n  /******/ // Object.prototype.hasOwnProperty.call\n  /******/__webpack_require__.o = function (object, property) {\n    return Object.prototype.hasOwnProperty.call(object, property);\n  };\n  /******/\n  /******/ // __webpack_public_path__\n  /******/__webpack_require__.p = \"\";\n  /******/\n  /******/ // Load entry module and return exports\n  /******/return __webpack_require__(__webpack_require__.s = 333);\n  /******/\n})(\n/************************************************************************/\n/******/{\n\n  /***/333:\n  /*!************************************************!*\\\n    !*** ./core/js/loaders/core_body_js_loader.js ***!\n    \\************************************************/\n  /*! dynamic exports provided */\n  /*! all exports used */\n  /***/function _(module, exports, __webpack_require__) {\n\n    eval(\"// object-fit\\nconst objectFitImages = __webpack_require__(/*! object-fit-images */ 334);\\n\\n//Run it\\nobjectFitImages();\\n\\n// lazy load\\nconst dcf_lazyload = __webpack_require__(/*! ../app/lazy-load.js */ 335);\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzMzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vY29yZS9qcy9sb2FkZXJzL2NvcmVfYm9keV9qc19sb2FkZXIuanM/OGJlNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBvYmplY3QtZml0XG5jb25zdCBvYmplY3RGaXRJbWFnZXMgPSByZXF1aXJlKCdvYmplY3QtZml0LWltYWdlcycpO1xuXG4vL1J1biBpdFxub2JqZWN0Rml0SW1hZ2VzKCk7XG5cbi8vIGxhenkgbG9hZFxuY29uc3QgZGNmX2xhenlsb2FkID0gcmVxdWlyZSgnLi4vYXBwL2xhenktbG9hZC5qcycpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9jb3JlL2pzL2xvYWRlcnMvY29yZV9ib2R5X2pzX2xvYWRlci5qc1xuLy8gbW9kdWxlIGlkID0gMzMzXG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///333\\n\");\n\n    /***/\n  },\n\n  /***/334:\n  /*!**************************************************************!*\\\n    !*** ./node_modules/object-fit-images/dist/ofi.common-js.js ***!\n    \\**************************************************************/\n  /*! dynamic exports provided */\n  /*! all exports used */\n  /***/function _(module, exports, __webpack_require__) {\n\n    \"use strict\";\n\n    eval(\"/*! npm.im/object-fit-images 3.2.3 */\\n\\n\\nvar OFI = 'bfred-it:object-fit-images';\\nvar propRegex = /(object-fit|object-position)\\\\s*:\\\\s*([-\\\\w\\\\s%]+)/g;\\nvar testImg = typeof Image === 'undefined' ? {style: {'object-position': 1}} : new Image();\\nvar supportsObjectFit = 'object-fit' in testImg.style;\\nvar supportsObjectPosition = 'object-position' in testImg.style;\\nvar supportsOFI = 'background-size' in testImg.style;\\nvar supportsCurrentSrc = typeof testImg.currentSrc === 'string';\\nvar nativeGetAttribute = testImg.getAttribute;\\nvar nativeSetAttribute = testImg.setAttribute;\\nvar autoModeEnabled = false;\\n\\nfunction createPlaceholder(w, h) {\\n\\treturn (\\\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='\\\" + w + \\\"' height='\\\" + h + \\\"'%3E%3C/svg%3E\\\");\\n}\\n\\nfunction polyfillCurrentSrc(el) {\\n\\tif (el.srcset && !supportsCurrentSrc && window.picturefill) {\\n\\t\\tvar pf = window.picturefill._;\\n\\t\\t// parse srcset with picturefill where currentSrc isn't available\\n\\t\\tif (!el[pf.ns] || !el[pf.ns].evaled) {\\n\\t\\t\\t// force synchronous srcset parsing\\n\\t\\t\\tpf.fillImg(el, {reselect: true});\\n\\t\\t}\\n\\n\\t\\tif (!el[pf.ns].curSrc) {\\n\\t\\t\\t// force picturefill to parse srcset\\n\\t\\t\\tel[pf.ns].supported = false;\\n\\t\\t\\tpf.fillImg(el, {reselect: true});\\n\\t\\t}\\n\\n\\t\\t// retrieve parsed currentSrc, if any\\n\\t\\tel.currentSrc = el[pf.ns].curSrc || el.src;\\n\\t}\\n}\\n\\nfunction getStyle(el) {\\n\\tvar style = getComputedStyle(el).fontFamily;\\n\\tvar parsed;\\n\\tvar props = {};\\n\\twhile ((parsed = propRegex.exec(style)) !== null) {\\n\\t\\tprops[parsed[1]] = parsed[2];\\n\\t}\\n\\treturn props;\\n}\\n\\nfunction setPlaceholder(img, width, height) {\\n\\t// Default: fill width, no height\\n\\tvar placeholder = createPlaceholder(width || 1, height || 0);\\n\\n\\t// Only set placeholder if it's different\\n\\tif (nativeGetAttribute.call(img, 'src') !== placeholder) {\\n\\t\\tnativeSetAttribute.call(img, 'src', placeholder);\\n\\t}\\n}\\n\\nfunction onImageReady(img, callback) {\\n\\t// naturalWidth is only available when the image headers are loaded,\\n\\t// this loop will poll it every 100ms.\\n\\tif (img.naturalWidth) {\\n\\t\\tcallback(img);\\n\\t} else {\\n\\t\\tsetTimeout(onImageReady, 100, img, callback);\\n\\t}\\n}\\n\\nfunction fixOne(el) {\\n\\tvar style = getStyle(el);\\n\\tvar ofi = el[OFI];\\n\\tstyle['object-fit'] = style['object-fit'] || 'fill'; // default value\\n\\n\\t// Avoid running where unnecessary, unless OFI had already done its deed\\n\\tif (!ofi.img) {\\n\\t\\t// fill is the default behavior so no action is necessary\\n\\t\\tif (style['object-fit'] === 'fill') {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Where object-fit is supported and object-position isn't (Safari < 10)\\n\\t\\tif (\\n\\t\\t\\t!ofi.skipTest && // unless user wants to apply regardless of browser support\\n\\t\\t\\tsupportsObjectFit && // if browser already supports object-fit\\n\\t\\t\\t!style['object-position'] // unless object-position is used\\n\\t\\t) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t}\\n\\n\\t// keep a clone in memory while resetting the original to a blank\\n\\tif (!ofi.img) {\\n\\t\\tofi.img = new Image(el.width, el.height);\\n\\t\\tofi.img.srcset = nativeGetAttribute.call(el, \\\"data-ofi-srcset\\\") || el.srcset;\\n\\t\\tofi.img.src = nativeGetAttribute.call(el, \\\"data-ofi-src\\\") || el.src;\\n\\n\\t\\t// preserve for any future cloneNode calls\\n\\t\\t// https://github.com/bfred-it/object-fit-images/issues/53\\n\\t\\tnativeSetAttribute.call(el, \\\"data-ofi-src\\\", el.src);\\n\\t\\tif (el.srcset) {\\n\\t\\t\\tnativeSetAttribute.call(el, \\\"data-ofi-srcset\\\", el.srcset);\\n\\t\\t}\\n\\n\\t\\tsetPlaceholder(el, el.naturalWidth || el.width, el.naturalHeight || el.height);\\n\\n\\t\\t// remove srcset because it overrides src\\n\\t\\tif (el.srcset) {\\n\\t\\t\\tel.srcset = '';\\n\\t\\t}\\n\\t\\ttry {\\n\\t\\t\\tkeepSrcUsable(el);\\n\\t\\t} catch (err) {\\n\\t\\t\\tif (window.console) {\\n\\t\\t\\t\\tconsole.warn('https://bit.ly/ofi-old-browser');\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tpolyfillCurrentSrc(ofi.img);\\n\\n\\tel.style.backgroundImage = \\\"url(\\\\\\\"\\\" + ((ofi.img.currentSrc || ofi.img.src).replace(/\\\"/g, '\\\\\\\\\\\"')) + \\\"\\\\\\\")\\\";\\n\\tel.style.backgroundPosition = style['object-position'] || 'center';\\n\\tel.style.backgroundRepeat = 'no-repeat';\\n\\tel.style.backgroundOrigin = 'content-box';\\n\\n\\tif (/scale-down/.test(style['object-fit'])) {\\n\\t\\tonImageReady(ofi.img, function () {\\n\\t\\t\\tif (ofi.img.naturalWidth > el.width || ofi.img.naturalHeight > el.height) {\\n\\t\\t\\t\\tel.style.backgroundSize = 'contain';\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tel.style.backgroundSize = 'auto';\\n\\t\\t\\t}\\n\\t\\t});\\n\\t} else {\\n\\t\\tel.style.backgroundSize = style['object-fit'].replace('none', 'auto').replace('fill', '100% 100%');\\n\\t}\\n\\n\\tonImageReady(ofi.img, function (img) {\\n\\t\\tsetPlaceholder(el, img.naturalWidth, img.naturalHeight);\\n\\t});\\n}\\n\\nfunction keepSrcUsable(el) {\\n\\tvar descriptors = {\\n\\t\\tget: function get(prop) {\\n\\t\\t\\treturn el[OFI].img[prop ? prop : 'src'];\\n\\t\\t},\\n\\t\\tset: function set(value, prop) {\\n\\t\\t\\tel[OFI].img[prop ? prop : 'src'] = value;\\n\\t\\t\\tnativeSetAttribute.call(el, (\\\"data-ofi-\\\" + prop), value); // preserve for any future cloneNode\\n\\t\\t\\tfixOne(el);\\n\\t\\t\\treturn value;\\n\\t\\t}\\n\\t};\\n\\tObject.defineProperty(el, 'src', descriptors);\\n\\tObject.defineProperty(el, 'currentSrc', {\\n\\t\\tget: function () { return descriptors.get('currentSrc'); }\\n\\t});\\n\\tObject.defineProperty(el, 'srcset', {\\n\\t\\tget: function () { return descriptors.get('srcset'); },\\n\\t\\tset: function (ss) { return descriptors.set(ss, 'srcset'); }\\n\\t});\\n}\\n\\nfunction hijackAttributes() {\\n\\tfunction getOfiImageMaybe(el, name) {\\n\\t\\treturn el[OFI] && el[OFI].img && (name === 'src' || name === 'srcset') ? el[OFI].img : el;\\n\\t}\\n\\tif (!supportsObjectPosition) {\\n\\t\\tHTMLImageElement.prototype.getAttribute = function (name) {\\n\\t\\t\\treturn nativeGetAttribute.call(getOfiImageMaybe(this, name), name);\\n\\t\\t};\\n\\n\\t\\tHTMLImageElement.prototype.setAttribute = function (name, value) {\\n\\t\\t\\treturn nativeSetAttribute.call(getOfiImageMaybe(this, name), name, String(value));\\n\\t\\t};\\n\\t}\\n}\\n\\nfunction fix(imgs, opts) {\\n\\tvar startAutoMode = !autoModeEnabled && !imgs;\\n\\topts = opts || {};\\n\\timgs = imgs || 'img';\\n\\n\\tif ((supportsObjectPosition && !opts.skipTest) || !supportsOFI) {\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// use imgs as a selector or just select all images\\n\\tif (imgs === 'img') {\\n\\t\\timgs = document.getElementsByTagName('img');\\n\\t} else if (typeof imgs === 'string') {\\n\\t\\timgs = document.querySelectorAll(imgs);\\n\\t} else if (!('length' in imgs)) {\\n\\t\\timgs = [imgs];\\n\\t}\\n\\n\\t// apply fix to all\\n\\tfor (var i = 0; i < imgs.length; i++) {\\n\\t\\timgs[i][OFI] = imgs[i][OFI] || {\\n\\t\\t\\tskipTest: opts.skipTest\\n\\t\\t};\\n\\t\\tfixOne(imgs[i]);\\n\\t}\\n\\n\\tif (startAutoMode) {\\n\\t\\tdocument.body.addEventListener('load', function (e) {\\n\\t\\t\\tif (e.target.tagName === 'IMG') {\\n\\t\\t\\t\\tfix(e.target, {\\n\\t\\t\\t\\t\\tskipTest: opts.skipTest\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t}, true);\\n\\t\\tautoModeEnabled = true;\\n\\t\\timgs = 'img'; // reset to a generic selector for watchMQ\\n\\t}\\n\\n\\t// if requested, watch media queries for object-fit change\\n\\tif (opts.watchMQ) {\\n\\t\\twindow.addEventListener('resize', fix.bind(null, imgs, {\\n\\t\\t\\tskipTest: opts.skipTest\\n\\t\\t}));\\n\\t}\\n}\\n\\nfix.supportsObjectFit = supportsObjectFit;\\nfix.supportsObjectPosition = supportsObjectPosition;\\n\\nhijackAttributes();\\n\\nmodule.exports = fix;\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///334\\n\");\n\n    /***/\n  },\n\n  /***/335:\n  /*!**********************************!*\\\n    !*** ./core/js/app/lazy-load.js ***!\n    \\**********************************/\n  /*! dynamic exports provided */\n  /*! all exports used */\n  /***/function _(module, exports) {\n\n    eval(\"// https://github.com/deanhume/lazy-observer-load/blob/master/lazy-load.js\\n\\n// Get all of the images that are marked up to lazy load\\nconst images = document.querySelectorAll('.dcf-lazy-img');\\nconst config = {\\n  // If the image gets within 50px in the Y axis, start the download.\\n//   rootMargin: '0px 0px 50px 0px',\\n  rootMargin: '0px',\\n//   threshold: 0.01\\n  threshold: 0.5\\n};\\n\\nlet imageCount = images.length;\\nlet observer;\\n\\n// If we don't have support for intersection observer, loads the images immediately\\nif (!('IntersectionObserver' in window)) {\\n  loadImagesImmediately(images);\\n} else {\\n  // It is supported, load the images\\n  observer = new IntersectionObserver(onIntersection, config);\\n\\n  // foreach() is not supported in IE\\n  for (let i = 0; i < images.length; i++) {\\n    let image = images[i];\\n    if (image.classList.contains('dcf-lazy-img-handled')) {\\n      continue;\\n    }\\n\\n    observer.observe(image);\\n  }\\n}\\n\\n/**\\n * Fetches the image for the given URL\\n * @param {string} url\\n */\\nfunction fetchImage(url) {\\n  return new Promise((resolve, reject) => {\\n    const image = new Image();\\n    image.src = url;\\n    image.onload = resolve;\\n    image.onerror = reject;\\n  });\\n}\\n\\n/**\\n * Preloads the image\\n * @param {object} image\\n */\\nfunction preloadImage(image) {\\n  const src = image.dataset.src;\\n  if (!src) {\\n    return;\\n  }\\n\\n  return fetchImage(src).then(() => { applyImage(image, src); });\\n}\\n\\n/**\\n * Load all of the images immediately\\n * @param {NodeListOf<Element>} images\\n */\\nfunction loadImagesImmediately(images) {\\n  // foreach() is not supported in IE\\n  for (let i = 0; i < images.length; i++) {\\n    let image = images[i];\\n    preloadImage(image);\\n  }\\n}\\n\\n/**\\n * Disconnect the observer\\n */\\nfunction disconnect() {\\n  if (!observer) {\\n    return;\\n  }\\n\\n  observer.disconnect();\\n}\\n\\n/**\\n * On intersection\\n * @param {array} entries\\n */\\nfunction onIntersection(entries) {\\n  // Disconnect if we've already loaded all of the images\\n  if (imageCount === 0) {\\n    observer.disconnect();\\n  }\\n\\n  // Loop through the entries\\n  for (let i = 0; i < entries.length; i++) {\\n    let entry = entries[i];\\n    // Are we in viewport?\\n    if (entry.intersectionRatio > 0) {\\n      imageCount--;\\n\\n      // Stop watching and load the image\\n      observer.unobserve(entry.target);\\n      preloadImage(entry.target);\\n    }\\n  }\\n}\\n\\n/**\\n * Apply the image\\n * @param {object} img\\n * @param {string} src\\n */\\nfunction applyImage(img, src) {\\n  // Prevent this from being lazy loaded a second time.\\n  img.classList.add('dcf-lazy-img-handled');\\n  img.src = src;\\n  img.classList.add('dcf-fade-up');\\n}\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzM1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vY29yZS9qcy9hcHAvbGF6eS1sb2FkLmpzP2QxYjMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaHR0cHM6Ly9naXRodWIuY29tL2RlYW5odW1lL2xhenktb2JzZXJ2ZXItbG9hZC9ibG9iL21hc3Rlci9sYXp5LWxvYWQuanNcblxuLy8gR2V0IGFsbCBvZiB0aGUgaW1hZ2VzIHRoYXQgYXJlIG1hcmtlZCB1cCB0byBsYXp5IGxvYWRcbmNvbnN0IGltYWdlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5kY2YtbGF6eS1pbWcnKTtcbmNvbnN0IGNvbmZpZyA9IHtcbiAgLy8gSWYgdGhlIGltYWdlIGdldHMgd2l0aGluIDUwcHggaW4gdGhlIFkgYXhpcywgc3RhcnQgdGhlIGRvd25sb2FkLlxuLy8gICByb290TWFyZ2luOiAnMHB4IDBweCA1MHB4IDBweCcsXG4gIHJvb3RNYXJnaW46ICcwcHgnLFxuLy8gICB0aHJlc2hvbGQ6IDAuMDFcbiAgdGhyZXNob2xkOiAwLjVcbn07XG5cbmxldCBpbWFnZUNvdW50ID0gaW1hZ2VzLmxlbmd0aDtcbmxldCBvYnNlcnZlcjtcblxuLy8gSWYgd2UgZG9uJ3QgaGF2ZSBzdXBwb3J0IGZvciBpbnRlcnNlY3Rpb24gb2JzZXJ2ZXIsIGxvYWRzIHRoZSBpbWFnZXMgaW1tZWRpYXRlbHlcbmlmICghKCdJbnRlcnNlY3Rpb25PYnNlcnZlcicgaW4gd2luZG93KSkge1xuICBsb2FkSW1hZ2VzSW1tZWRpYXRlbHkoaW1hZ2VzKTtcbn0gZWxzZSB7XG4gIC8vIEl0IGlzIHN1cHBvcnRlZCwgbG9hZCB0aGUgaW1hZ2VzXG4gIG9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKG9uSW50ZXJzZWN0aW9uLCBjb25maWcpO1xuXG4gIC8vIGZvcmVhY2goKSBpcyBub3Qgc3VwcG9ydGVkIGluIElFXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaW1hZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGltYWdlID0gaW1hZ2VzW2ldO1xuICAgIGlmIChpbWFnZS5jbGFzc0xpc3QuY29udGFpbnMoJ2RjZi1sYXp5LWltZy1oYW5kbGVkJykpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIG9ic2VydmVyLm9ic2VydmUoaW1hZ2UpO1xuICB9XG59XG5cbi8qKlxuICogRmV0Y2hlcyB0aGUgaW1hZ2UgZm9yIHRoZSBnaXZlbiBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAqL1xuZnVuY3Rpb24gZmV0Y2hJbWFnZSh1cmwpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBpbWFnZSA9IG5ldyBJbWFnZSgpO1xuICAgIGltYWdlLnNyYyA9IHVybDtcbiAgICBpbWFnZS5vbmxvYWQgPSByZXNvbHZlO1xuICAgIGltYWdlLm9uZXJyb3IgPSByZWplY3Q7XG4gIH0pO1xufVxuXG4vKipcbiAqIFByZWxvYWRzIHRoZSBpbWFnZVxuICogQHBhcmFtIHtvYmplY3R9IGltYWdlXG4gKi9cbmZ1bmN0aW9uIHByZWxvYWRJbWFnZShpbWFnZSkge1xuICBjb25zdCBzcmMgPSBpbWFnZS5kYXRhc2V0LnNyYztcbiAgaWYgKCFzcmMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICByZXR1cm4gZmV0Y2hJbWFnZShzcmMpLnRoZW4oKCkgPT4geyBhcHBseUltYWdlKGltYWdlLCBzcmMpOyB9KTtcbn1cblxuLyoqXG4gKiBMb2FkIGFsbCBvZiB0aGUgaW1hZ2VzIGltbWVkaWF0ZWx5XG4gKiBAcGFyYW0ge05vZGVMaXN0T2Y8RWxlbWVudD59IGltYWdlc1xuICovXG5mdW5jdGlvbiBsb2FkSW1hZ2VzSW1tZWRpYXRlbHkoaW1hZ2VzKSB7XG4gIC8vIGZvcmVhY2goKSBpcyBub3Qgc3VwcG9ydGVkIGluIElFXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaW1hZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGltYWdlID0gaW1hZ2VzW2ldO1xuICAgIHByZWxvYWRJbWFnZShpbWFnZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNjb25uZWN0IHRoZSBvYnNlcnZlclxuICovXG5mdW5jdGlvbiBkaXNjb25uZWN0KCkge1xuICBpZiAoIW9ic2VydmVyKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xufVxuXG4vKipcbiAqIE9uIGludGVyc2VjdGlvblxuICogQHBhcmFtIHthcnJheX0gZW50cmllc1xuICovXG5mdW5jdGlvbiBvbkludGVyc2VjdGlvbihlbnRyaWVzKSB7XG4gIC8vIERpc2Nvbm5lY3QgaWYgd2UndmUgYWxyZWFkeSBsb2FkZWQgYWxsIG9mIHRoZSBpbWFnZXNcbiAgaWYgKGltYWdlQ291bnQgPT09IDApIHtcbiAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gIH1cblxuICAvLyBMb29wIHRocm91Z2ggdGhlIGVudHJpZXNcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbnRyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGVudHJ5ID0gZW50cmllc1tpXTtcbiAgICAvLyBBcmUgd2UgaW4gdmlld3BvcnQ/XG4gICAgaWYgKGVudHJ5LmludGVyc2VjdGlvblJhdGlvID4gMCkge1xuICAgICAgaW1hZ2VDb3VudC0tO1xuXG4gICAgICAvLyBTdG9wIHdhdGNoaW5nIGFuZCBsb2FkIHRoZSBpbWFnZVxuICAgICAgb2JzZXJ2ZXIudW5vYnNlcnZlKGVudHJ5LnRhcmdldCk7XG4gICAgICBwcmVsb2FkSW1hZ2UoZW50cnkudGFyZ2V0KTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBcHBseSB0aGUgaW1hZ2VcbiAqIEBwYXJhbSB7b2JqZWN0fSBpbWdcbiAqIEBwYXJhbSB7c3RyaW5nfSBzcmNcbiAqL1xuZnVuY3Rpb24gYXBwbHlJbWFnZShpbWcsIHNyYykge1xuICAvLyBQcmV2ZW50IHRoaXMgZnJvbSBiZWluZyBsYXp5IGxvYWRlZCBhIHNlY29uZCB0aW1lLlxuICBpbWcuY2xhc3NMaXN0LmFkZCgnZGNmLWxhenktaW1nLWhhbmRsZWQnKTtcbiAgaW1nLnNyYyA9IHNyYztcbiAgaW1nLmNsYXNzTGlzdC5hZGQoJ2RjZi1mYWRlLXVwJyk7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2NvcmUvanMvYXBwL2xhenktbG9hZC5qc1xuLy8gbW9kdWxlIGlkID0gMzM1XG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///335\\n\");\n\n    /***/\n  }\n\n  /******/ });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n");

/***/ })
/******/ ]);